trigger:
  branches:
    include:
      - main
      - master
      - develop

# Optional: run PR validations too
pr:
  branches:
    include:
      - main
      - master
      - develop

pool:
  vmImage: 'windows-latest'

stages:
  - stage: Playwright_Tests_Windows
    displayName: Playwright Tests (Windows)
    jobs:
      - job: RunTests_Windows
        displayName: Run Playwright Tests on Windows (Sharded)
        pool:
          vmImage: 'windows-latest'
        strategy:
          parallel: 2   # Split suite across 2 agents
        variables:
          CI: 'true'
        steps:
          - checkout: self

          # Cache node_modules based on package-lock.json (or pnpm-lock.yaml/yarn.lock if you use those)
          - task: Cache@2
            displayName: Cache npm
            inputs:
              key: 'npm | "$(Agent.OS)" | package-lock.json'
              restoreKeys: |
                npm | "$(Agent.OS)"
              path: '$(Pipeline.Workspace)/.npm'

          - task: NodeTool@0
            inputs:
              versionSpec: '18.x'
            displayName: 'Use Node.js 18.x'

          - script: |
              npm ci --cache $(Pipeline.Workspace)/.npm --prefer-offline
            displayName: 'Install dependencies'

          # On Windows, --with-deps is not required, but leaving it doesnâ€™t hurt
          - script: npx playwright install
            displayName: 'Install Playwright browsers'

          - script: |
              npx playwright test ^
                --project=chromium ^
                --project=firefox ^
                --project=edge ^
                --shard=$(System.JobPositionInPhase)/$(System.TotalJobsInPhase) ^
                --reporter=html,junit ^
                --retries=1
            displayName: 'Run Playwright tests (sharded)'
            continueOnError: true

          # Publish JUnit so the Tests tab shows results
          - task: PublishTestResults@2
            displayName: 'Publish JUnit results'
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/test-results/**/*.xml'
              failTaskOnFailedTests: false
              mergeTestResults: true

          # Publish HTML report
          - task: PublishBuildArtifacts@1
            displayName: 'Publish HTML report artifact'
            condition: succeededOrFailed()
            inputs:
              PathtoPublish: 'playwright-report'
              ArtifactName: 'playwright-report-windows'

          # Publish screenshots (adjust path if yours differs)
          - task: PublishBuildArtifacts@1
            displayName: 'Publish screenshots artifact'
            condition: succeededOrFailed()
            inputs:
              PathtoPublish: '**/screenshots'
              ArtifactName: 'screenshots-windows'
